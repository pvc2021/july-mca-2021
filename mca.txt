Endpoints:

1)RESTful Webservices (Smart Endpoints)
  - HTTP/HTTPS

2)Dumps Pipes :(MQ)  JMS
  - Queue
  - Topic

AMQP
------------------------------------------

1.storeapp: (2.3.8.RELEASE)
    -Starters:
          -H2
          -Spring Web
          -Spring Boot Actuator
          -Spring Boot DevTools


--------------------------------------------

Spring IOC
                  @Component

@Controller        @Service     @Reposiotory
@RestController

----------------------------------------------------
/products               GET
/products               POST
/products/1             PUT
/products/1             GET
/products/1             DELETE
-------------------------------------------------------



Day 2:

Spring Core  - environment -application.properties

1000 Microservices
   - application.properties (dev)

1000 .properties fo

    - Dev,Test,Prod

3000 .properties    

----------------------------------------------
application-dev.properties

/application/dev
/application/dev/master

application-prod.properties

/application/prod
/application/prod/master

product-service-prod.properties

/product-service/prod
-----------------------------------------------------
https://springio.projects/spring-cloud-config

Spring Cloud Config :(Distrubuted Configuration)
Spring Cloud Config provides server and client-side support for externalized configuration in distrubuted system.

Features:

Spring Cloud Config Server features:
 a)HTTP,resource-based API for external-configuration (name-value pairs or equivalent YAML content)
 b)Encrypt and decrypt property values (symmetric & asymmetric)
 c)Embeddable easily in a Spring Boot application using @EnableConfigServer


Config Client features (for Spring applications)
a) Bind to config server & initialize Spring Environment with remote property sources.
b)Encrypt & decrypt property values (symmetrice or asymmetric)


Steps:

Step 1: Setup the Git Reposiotry & upload application.properties file

https://github.com/pvc2021/spring-boot-configuration

------------------------------

Step 2:
Spring Cloud Config Server:

2.1) Create new project (cloudserver-config)
   -Select starters
    -Config Server
    -Spring Boot Actuator

2.2)Add @EnableConfigServer in Application Class (main method)

2.3) In application properties

server.port=8888
spring.cloud.config.server.git.uri=https://github.com/pradeepch82/spring-cloud

2.4)Start the Application

2.5)Check it
http://localhost:8888/{name}/{label}
http://localhost:8888/application/default/master
 -application.properties



http://localhost:8888/application-default.properties
http://localhost:8888/application-default.json

http://localhost:8888/application-dev.properties
http://localhost:8888/application-dev.json



Step 3:
Spring cloud Config Client :(product-service) 

3.1)Add spring-cloud-starter-confing starter in pom.xml
   -Config Client
3.2) In application.properties:
    server.port=8080 
    spring.cloud.config.uri=http://localhost:8888
3.3)Start the Config Server

3.4)Then Start the storeapp microservice
------------------------------------------
1000 Microservice
-Dev,Test,Prod           
3000 .properties

dev - Profile (H2)
application-dev.properties
prod -Profile (MySQL)
application-prod.properties

----------------------------
http://localhost:8888/application/dev/master
http://localhost:8888/application/prod/master

-------------------------------
VM Argument
  -Dspring.profiles.active=dev    in VM Argument
  -Dspring.profiles.active=prod    in VM Argument

Config Client <---> Config server  <---> Github
        N               1

-------------------------------------------------
Renamed
application-dev.properties
application-prod.properties

to 

product-service-dev.properties
producct-service-prod.properties

----------------------------------------

Test Config server


http://localhost:8888/product-service/dev/master
http://localhost:8888/product-service/prod/master

---------------------------------------------
Storeapp:

In application.properties

spring.application.name=productservice


VM Argument
  -Dspring.profiles.active=dev    in VM Argument
  -Dspring.profiles.active=prod    in VM Argument

-------------------------------------------------
http://localhost:8080/actuator/env

2 Solution
1)Restart the application

2)Spring Cloud Config Client  
    -Actuator - /refresh


Steps to enable Actuator:

1)Add the dependency in pom.xml
<dependency>
<groupId>org.springframework.boot</groupId>
<artifactId>spring-boot-starter-atuator</artifactId>
</dependency>


2)In application.properties file
management.endpoints.web.exposure.include=*

3)Exposing 15 Endpoints(s) beneath base path '/actuator'
  -actuator/refresh/   (trigger)

- POST method

POSTMAN
      -POST  -actuator/refresh



mca-day5
=========



https://microservices.io/patterns/client-side-discovery.html


config-server           : 8888
admin-server            : 9999
zipkin-server           : 9041 
eureka-server           : 8761
product-service         : 1111
customer-service        : 2222
api-gateway             : 8765
consumer-ribbon-hystrix : 9995



To access Hystrix Dashb board   :http://localhost:9995/hystrix

http://www.masterspringboot.com/cloud/netflix/configuring-hystrix-dashboard-in-your-spring-boot-application/


mca-day6
=========

https://microservices.io/patterns/client-side-discovery.html


Spring Cloud OpenFeign
========================
This project provides OpenFeign integrations for Spring Boot apps through autoconfiguration and binding to the Spring Environment and other Spring programming model idioms.

Features
Declarative REST Client: Feign creates a dynamic implementation of an interface decorated with JAX-RS or Spring MVC annotations


config-server               : 8888
admin-server                : 9999
zipkin-server               : 9041 
eureka-server               : 8761
product-service             : 1111
customer-service            : 2222
api-gateway                 : 8765
consumer-ribbon-hystrix     : 9995
consumer-openfeign-hystrix  : 9994


mca-day7    :24-July-2021
============================
JMS (Java Messaging Service) :To develop a java application to send and recevie messages in synchronus and asynchronus way 


Types of commmuncation
=======================
1.synchronus =>   Sender and receiver should be online (Phone calling)
2.asynchronus =>  Sender and receiver need not be online (SMS,Whatsapp,Email)




Types of Microservice Communication
====================================
There are two primary forms of communication between microservices that need to be solved for:

Request-Response:  (Smart end points :REST API) =>http/https
==================
1.One service invokes another service by making an explicit request, usually to store or retrieve data.
2.The service then expects a response: either a resource or an acknowledgement.

Observer:  (Dumb Pipes) =>AQMQ 
=========
1.Event based, implicit invocation where one service publishes an event.
2.one or more observers that were watching for that event respond to it by running logic asynchronously,
   outside the awareness of the producer of the event.


JMS Providers
=============
MOM (Message Oriented Middlware) 
1.JBoss
2.Oracle Weblogic,
3.Active MQ :https://activemq.apache.org/components/classic/download/
4.Rabbit MQ
5.IBM Websphere,
6.MQ Series



1.Point to Point (One to One) =>Queue 
  
  One message will have one consumer only
  
2.Publisher to Subscriber (One to Many) =>Topic

   One message will have one/more subscribers 
  


1.JMS in memory Active MQ
    Producer ->
	   JMSTemplate->
	               ->Queue
      	                   =>Consumer1
                           =>Consumer2
			   
			 
      

2.JMS  stand alone Active MQ


Active MQ Download :
====================
https://activemq.apache.org/components/classic/download/


To start Active MQ
c:\apache-activemq-5.15.8\bin>activemq start 

Active MQ Web Console  :http://localhost:8161/
  default username :admin
  default password :admin
    
  
The Spring AMQP project applies core Spring concepts to the development of AMQP-based messaging solutions. 
It provides a "template" as a high-level abstraction for sending and receiving messages. 
It also provides support for Message-driven POJOs with a "listener container". 
These libraries facilitate management of AMQP resources while promoting the use of dependency injection and declarative configuration. 
In all of these cases, you will see similarities to the JMS support in the Spring Framework.

The project consists of two parts; spring-amqp is the base abstraction, and spring-rabbit is the RabbitMQ implementation.

Features
Listener container for asynchronous processing of inbound messages

RabbitTemplate for sending and receiving messages

RabbitAdmin for automatically declaring queues, exchanges and bindings

